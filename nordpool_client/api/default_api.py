# coding: utf-8

"""
    Auction API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nordpool_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def auctions_auction_id_external_get(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Contracts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_get(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auctions_auction_id_external_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
        else:
            (data) = self.auctions_auction_id_external_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
            return data

    def auctions_auction_id_external_get_with_http_info(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Contracts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_get_with_http_info(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auction_id_external']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auctions_auction_id_external_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auction_id_external' is set
        if ('auction_id_external' not in params or
                params['auction_id_external'] is None):
            raise ValueError("Missing the required parameter `auction_id_external` when calling `auctions_auction_id_external_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auction_id_external' in params:
            path_params['auctionIdExternal'] = params['auction_id_external']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auctions/{auctionIdExternal}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auctions_auction_id_external_orders_get(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_orders_get(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auctions_auction_id_external_orders_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
        else:
            (data) = self.auctions_auction_id_external_orders_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
            return data

    def auctions_auction_id_external_orders_get_with_http_info(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_orders_get_with_http_info(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auction_id_external']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auctions_auction_id_external_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auction_id_external' is set
        if ('auction_id_external' not in params or
                params['auction_id_external'] is None):
            raise ValueError("Missing the required parameter `auction_id_external` when calling `auctions_auction_id_external_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auction_id_external' in params:
            path_params['auctionIdExternal'] = params['auction_id_external']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auctions/{auctionIdExternal}/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auctions_auction_id_external_portfoliovolumes_get(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Portfolio Volumes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_portfoliovolumes_get(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auctions_auction_id_external_portfoliovolumes_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
        else:
            (data) = self.auctions_auction_id_external_portfoliovolumes_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
            return data

    def auctions_auction_id_external_portfoliovolumes_get_with_http_info(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Portfolio Volumes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_portfoliovolumes_get_with_http_info(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auction_id_external']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auctions_auction_id_external_portfoliovolumes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auction_id_external' is set
        if ('auction_id_external' not in params or
                params['auction_id_external'] is None):
            raise ValueError("Missing the required parameter `auction_id_external` when calling `auctions_auction_id_external_portfoliovolumes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auction_id_external' in params:
            path_params['auctionIdExternal'] = params['auction_id_external']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auctions/{auctionIdExternal}/portfoliovolumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auctions_auction_id_external_prices_get(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_prices_get(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auctions_auction_id_external_prices_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
        else:
            (data) = self.auctions_auction_id_external_prices_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
            return data

    def auctions_auction_id_external_prices_get_with_http_info(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_prices_get_with_http_info(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auction_id_external']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auctions_auction_id_external_prices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auction_id_external' is set
        if ('auction_id_external' not in params or
                params['auction_id_external'] is None):
            raise ValueError("Missing the required parameter `auction_id_external` when calling `auctions_auction_id_external_prices_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auction_id_external' in params:
            path_params['auctionIdExternal'] = params['auction_id_external']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auctions/{auctionIdExternal}/prices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auctions_auction_id_external_trades_get(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Trades  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_trades_get(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auctions_auction_id_external_trades_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
        else:
            (data) = self.auctions_auction_id_external_trades_get_with_http_info(auction_id_external, **kwargs)  # noqa: E501
            return data

    def auctions_auction_id_external_trades_get_with_http_info(self, auction_id_external, **kwargs):  # noqa: E501
        """Auctions Trades  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_auction_id_external_trades_get_with_http_info(auction_id_external, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auction_id_external: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auction_id_external']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auctions_auction_id_external_trades_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auction_id_external' is set
        if ('auction_id_external' not in params or
                params['auction_id_external'] is None):
            raise ValueError("Missing the required parameter `auction_id_external` when calling `auctions_auction_id_external_trades_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auction_id_external' in params:
            path_params['auctionIdExternal'] = params['auction_id_external']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auctions/{auctionIdExternal}/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def auctions_get(self, **kwargs):  # noqa: E501
        """Auctions by closeBidding  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str close_bidding_from:
        :param str close_bidding_to:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.auctions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.auctions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def auctions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Auctions by closeBidding  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.auctions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str close_bidding_from:
        :param str close_bidding_to:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'close_bidding_from', 'close_bidding_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auctions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'close_bidding_from' in params:
            query_params.append(('closeBiddingFrom', params['close_bidding_from']))  # noqa: E501
        if 'close_bidding_to' in params:
            query_params.append(('closeBiddingTo', params['close_bidding_to']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auctions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def blockorders_order_id_get(self, order_id, **kwargs):  # noqa: E501
        """BlockOrder by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blockorders_order_id_get(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.blockorders_order_id_get_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.blockorders_order_id_get_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def blockorders_order_id_get_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """BlockOrder by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blockorders_order_id_get_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method blockorders_order_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `blockorders_order_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/blockorders/{orderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def blockorders_order_id_patch(self, order_id, **kwargs):  # noqa: E501
        """BlockOrder modify  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blockorders_order_id_patch(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :param BlockordersOrderIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.blockorders_order_id_patch_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.blockorders_order_id_patch_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def blockorders_order_id_patch_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """BlockOrder modify  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blockorders_order_id_patch_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :param BlockordersOrderIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method blockorders_order_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `blockorders_order_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/blockorders/{orderId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def blockorders_post(self, **kwargs):  # noqa: E501
        """BlockOrder submit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blockorders_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BlockordersBody body:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.blockorders_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.blockorders_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def blockorders_post_with_http_info(self, **kwargs):  # noqa: E501
        """BlockOrder submit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blockorders_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BlockordersBody body:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method blockorders_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/blockorders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connect_token_post(self, **kwargs):  # noqa: E501
        """Token auction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connect_token_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grant_type:
        :param str scope:
        :param str username:
        :param str password:
        :param str authorization:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.connect_token_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.connect_token_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def connect_token_post_with_http_info(self, **kwargs):  # noqa: E501
        """Token auction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connect_token_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grant_type:
        :param str scope:
        :param str username:
        :param str password:
        :param str authorization:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grant_type', 'scope', 'username', 'password', 'authorization', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connect_token_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'grant_type' in params:
            form_params.append(('grant_type', params['grant_type']))  # noqa: E501
        if 'scope' in params:
            form_params.append(('scope', params['scope']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/connect/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def curveorders_order_id_get(self, order_id, **kwargs):  # noqa: E501
        """CurveOrder By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.curveorders_order_id_get(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.curveorders_order_id_get_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.curveorders_order_id_get_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def curveorders_order_id_get_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """CurveOrder By Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.curveorders_order_id_get_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method curveorders_order_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `curveorders_order_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/curveorders/{orderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def curveorders_order_id_patch(self, order_id, **kwargs):  # noqa: E501
        """CurveOrder modify  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.curveorders_order_id_patch(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :param CurveordersOrderIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.curveorders_order_id_patch_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.curveorders_order_id_patch_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def curveorders_order_id_patch_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """CurveOrder modify  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.curveorders_order_id_patch_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: (required)
        :param CurveordersOrderIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method curveorders_order_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `curveorders_order_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/curveorders/{orderId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def curveorders_post(self, **kwargs):  # noqa: E501
        """CurveOrder submit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.curveorders_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CurveordersBody body:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.curveorders_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.curveorders_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def curveorders_post_with_http_info(self, **kwargs):  # noqa: E501
        """CurveOrder submit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.curveorders_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CurveordersBody body:
        :param str content_type:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method curveorders_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/curveorders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
